vagrant up
vagrant ssh k8s-worker
vagrant ssh k8s-master


#Adım 1: Gerekli sistem ayarlarını yap k8s  install

sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab

sudo modprobe overlay
sudo modprobe br_netfilter

sudo tee /etc/modules-load.d/k8s.conf <<EOF
overlay
br_netfilter
EOF

sudo tee /etc/sysctl.d/k8s.conf <<EOF
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

sudo sysctl --system


#Adım 2: containerd kur (kubelet için gerekli)

sudo apt update && sudo apt install -y containerd

sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml

# Systemd cgroup driver ayarı
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

# Restart et
sudo systemctl restart containerd
sudo systemctl enable containerd



#Adım 3: kubeadm, kubelet, kubectl kur

sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl

sudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl


#Aşama 4: Kubernetes Cluster’ı Başlat, Bu adım sadece k8s-master sunucusunda yapılır.

sudo kubeadm init --pod-network-cidr=192.168.0.0/16
sudo kubeadm init --apiserver-advertise-address=192.168.56.10 --pod-network-cidr=192.168.0.0/16


#Çıktı 
To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/calico.yaml

#hatalar
sudo containerd config default | sudo tee /etc/containerd/config.toml
#SystemdCgroup = true olmalı çıktıda değilse alttakini çalıştır.
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

#kontrol et
grep SystemdCgroup /etc/containerd/config.toml
SystemdCgroup = true #olmalı

sudo systemctl restart containerd
sudo systemctl restart kubelet

kubectl get nodes
kubectl get pods -n kube-system






kubectl describe node k8s-master
kubectl get events -A | grep calico




#master dan token üretme
sudo kubeadm token create --print-join-command


#worker da çalıştır 
sudo kubeadm join 192.168.56.10:6443 --token yric5m.vl04cbz60wpac9mi --discovery-token-ca-cert-hash sha256:2af9ba5e4a4342df64e24e2103ebfa3a1bd075cf0032dfe9adf63717894c2f29


#
mkdir -p ~/.kube
sudo cp -i /etc/kubernetes/admin.conf ~/.kube/config
sudo chown $(id -u):$(id -g) ~/.kube/config



kubectl get nodes


#Go install

        #wget https://go.dev/dl/go1.22.3.linux-amd64.tar.gz
        #sudo tar -C /mnt/c/Users/emrey/vagrant-k8s/go -xzf go1.22.3.linux-amd64.tar.gz
        #
        #echo 'export PATH=$PATH:/mnt/c/Users/emrey/vagrant-k8s/go/go/bin' >> ~/.bashrc
        #source ~/.bashrc

wget https://go.dev/dl/go1.23.3.linux-amd64.tar.gz

sudo tar -C /usr/local -xzf go1.23.3.linux-amd64.tar.gz
echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
source ~/.bashrc




#Kubebuilder install

curl -L -o kubebuilder https://github.com/kubernetes-sigs/kubebuilder/releases/download/v3.15.0/kubebuilder_3.15.0_linux_amd64
chmod +x kubebuilder
sudo mv kubebuilder /usr/local/bin/

kubebuilder_3.15.0_linux_amd64.tar.gz


#Kubebuilder init

mkdir -p ~/projects/trendyol-operator
cd ~/projects/trendyol-operator



mkdir -p /mnt/c/Users/emrey/vagrant-k8s/trendyol-operator

kubebuilder init --domain trendyol.com --repo github.com/emreyalnizlar/trendyol-operator

    sudo apt update
    sudo apt install -y build-essential
    make generate
        #Bu, controller-gen aracıyla:
        #
        #zz_generated.deepcopy.go dosyalarını üretir
        #
        #CRD YAML’larını config/crd/ altına yerleştirir
        ya da 

    make manifests
        # tüm CRD + RBAC dosyalarını üretir.

kubebuilder create api --group apps --version v1 --kind TrendyolApplication

        #api/v1/trendyolapplication_types.go dosyasını oluşturur (CRD yapısı)
        #
        #controllers/trendyolapplication_controller.go dosyasını oluşturur (iş mantığı)
        #
        #config/crd, config/rbac, config/samples gibi dizinleri günceller



nano api/v1/trendyolapplication_types.go
    type TrendyolApplicationSpec struct {
    Namespace   string            `json:"namespace"`
    Image       string            `json:"image"`
    PullSecret  string            `json:"pullSecret"`
    Command     []string          `json:"command"`
    Arguments   []string          `json:"arguments"`
    Replicas    *int32            `json:"replicas"`
    Environment map[string]string `json:"environment"`
}


    type TrendyolApplicationStatus struct {
    Phase      string `json:"phase,omitempty"`
    DeployedAs string `json:"deployedAs,omitempty"`
    Namespace  string `json:"namespace,omitempty"`
}

#ekledikten sonra make generate 

make generate
make manifests
make install


sudo apt update
sudo apt install -y curl
KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
echo $KUBECTL_VERSION
curl -LO https://dl.k8s.io/release/v1.31.0/bin/linux/amd64/kubectl
chmod +x kubectl
sudo mv kubectl /usr/local/bin/

#CRD Kontrolü
kubectl get crds | grep trendyol

cd config/samples
nano apps_v1_trendyolapplication.yaml

nano Makefile
        run: ## Run against the configured Kubernetes cluster in ~/.kube/config
        	go run ./main.go
#/mnt/c/Users/emrey/vagrant-k8s/trendyol-operator  bura konuma gidip

make run
kubectl apply -f config/samples/apps_v1_trendyolapplication.yaml



git commit -m "vagrant- vm - kubernetes - operator kurulumlar"




#Webhook oluşturma cd /trendoyol-operator dosya
kubebuilder create webhook --group apps --version v1 --kind TrendyolApplic
kubebuilder create webhook --group apps --version v1 --kind TrendyolApplication --defaulting --programmatic-validation


make install
make run

